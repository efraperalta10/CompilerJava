
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 20 09:50:24 CDT 2022
//----------------------------------------------------

package compiler;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 20 09:50:24 CDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\007\000\002\015" +
    "\004\000\002\015\002\000\002\004\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\004\000" +
    "\002\052\002\000\002\052\005\000\002\016\004\000\002" +
    "\016\002\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\012\000\002\051\002\000" +
    "\002\051\004\000\002\023\007\000\002\024\011\000\002" +
    "\025\005\000\002\026\005\000\002\027\005\000\002\030" +
    "\006\000\002\031\004\000\002\045\002\000\002\045\005" +
    "\000\002\032\004\000\002\046\002\000\002\046\005\000" +
    "\002\033\004\000\002\053\002\000\002\053\004\000\002" +
    "\034\003\000\002\034\003\000\002\035\004\000\002\054" +
    "\002\000\002\054\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\004\000\002\050\002\000\002" +
    "\050\005\000\002\040\004\000\002\047\002\000\002\047" +
    "\005\000\002\043\003\000\002\043\003\000\002\042\003" +
    "\000\002\042\004\000\002\041\003\000\002\041\003\000" +
    "\002\044\005\000\002\044\003\000\002\044\003\000\002" +
    "\063\003\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\004\000\002\063\005" +
    "\000\002\063\005\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\005\000\002\062\004\000\002" +
    "\062\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\005\004\001\002\000\004\045\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\030\006\ufffe\011\ufffe\013\ufffe\014\ufffe\015\011\016" +
    "\014\017\015\023\ufffe\045\ufffe\046\ufffe\051\ufffe\001\002" +
    "\000\030\006\ufffe\011\ufffe\013\ufffe\014\ufffe\015\011\016" +
    "\014\017\015\023\ufffe\045\ufffe\046\ufffe\051\ufffe\001\002" +
    "\000\004\051\ufffb\001\002\000\004\051\156\001\002\000" +
    "\022\006\020\011\025\013\024\014\031\023\017\045\022" +
    "\046\ufff5\051\030\001\002\000\004\051\ufffc\001\002\000" +
    "\004\051\ufffa\001\002\000\022\006\020\011\025\013\024" +
    "\014\031\023\017\045\022\046\ufff5\051\030\001\002\000" +
    "\004\043\150\001\002\000\004\043\137\001\002\000\022" +
    "\006\ufff0\011\ufff0\013\ufff0\014\ufff0\023\ufff0\045\ufff0\046" +
    "\ufff0\051\ufff0\001\002\000\022\006\020\011\025\013\024" +
    "\014\031\023\017\045\022\046\ufff5\051\030\001\002\000" +
    "\022\006\ufff1\011\ufff1\013\ufff1\014\ufff1\023\ufff1\045\ufff1" +
    "\046\ufff1\051\ufff1\001\002\000\004\051\133\001\002\000" +
    "\004\045\022\001\002\000\022\006\ufff4\011\ufff4\013\ufff4" +
    "\014\ufff4\023\ufff4\045\ufff4\046\ufff4\051\ufff4\001\002\000" +
    "\022\006\ufff2\011\ufff2\013\ufff2\014\ufff2\023\ufff2\045\ufff2" +
    "\046\ufff2\051\ufff2\001\002\000\004\037\122\001\002\000" +
    "\020\020\040\025\uffdd\026\uffdd\043\uffdd\051\uffdd\052\uffdd" +
    "\066\uffdd\001\002\000\022\006\uffee\011\uffee\013\uffee\014" +
    "\uffee\023\uffee\045\uffee\046\uffee\051\uffee\001\002\000\022" +
    "\006\uffef\011\uffef\013\uffef\014\uffef\023\uffef\045\uffef\046" +
    "\uffef\051\uffef\001\002\000\004\046\036\001\002\000\022" +
    "\006\ufff3\011\ufff3\013\ufff3\014\ufff3\023\ufff3\045\ufff3\046" +
    "\ufff3\051\ufff3\001\002\000\004\002\000\001\002\000\016" +
    "\025\063\026\071\043\070\051\064\052\066\066\060\001" +
    "\002\000\020\020\040\025\uffdd\026\uffdd\043\uffdd\051\uffdd" +
    "\052\uffdd\066\uffdd\001\002\000\004\040\054\001\002\000" +
    "\012\021\051\022\uffe0\040\uffe0\044\uffe0\001\002\000\010" +
    "\022\045\040\uffe3\044\uffe3\001\002\000\006\040\uffe4\044" +
    "\uffe4\001\002\000\020\020\040\025\uffdd\026\uffdd\043\uffdd" +
    "\051\uffdd\052\uffdd\066\uffdd\001\002\000\010\022\045\040" +
    "\uffe3\044\uffe3\001\002\000\006\040\uffe2\044\uffe2\001\002" +
    "\000\010\022\uffe1\040\uffe1\044\uffe1\001\002\000\020\020" +
    "\040\025\uffdd\026\uffdd\043\uffdd\051\uffdd\052\uffdd\066\uffdd" +
    "\001\002\000\012\021\051\022\uffe0\040\uffe0\044\uffe0\001" +
    "\002\000\010\022\uffdf\040\uffdf\044\uffdf\001\002\000\022" +
    "\006\uffe7\011\uffe7\013\uffe7\014\uffe7\023\uffe7\045\uffe7\046" +
    "\uffe7\051\uffe7\001\002\000\016\025\uffdc\026\uffdc\043\uffdc" +
    "\051\uffdc\052\uffdc\066\uffdc\001\002\000\010\043\070\051" +
    "\064\052\066\001\002\000\012\021\uffde\022\uffde\040\uffde" +
    "\044\uffde\001\002\000\012\021\uffdb\022\uffdb\040\uffdb\044" +
    "\uffdb\001\002\000\036\021\uffc8\022\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\040\uffc8\044\uffc8\001\002\000\036\021\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\115\030\113\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\044\uffcc" +
    "\001\002\000\014\025\uffc6\026\uffc6\043\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\036\021\uffc2\022\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\040\uffc2\044\uffc2\001\002\000\032\021\uffcf" +
    "\022\uffcf\024\uffcf\025\063\026\071\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\044\uffcf\001\002\000\036" +
    "\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3" +
    "\044\uffc3\001\002\000\026\021\uffd8\022\uffd8\024\102\032" +
    "\075\033\101\034\077\035\100\036\104\040\uffd8\044\uffd8" +
    "\001\002\000\020\020\040\025\uffdd\026\uffdd\043\uffdd\051" +
    "\uffdd\052\uffdd\066\uffdd\001\002\000\014\025\uffc5\026\uffc5" +
    "\043\uffc5\051\uffc5\052\uffc5\001\002\000\012\021\uffda\022" +
    "\uffda\040\uffda\044\uffda\001\002\000\004\044\074\001\002" +
    "\000\036\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\040\uffc4\044\uffc4\001\002\000\014\025\uffd5\026\uffd5\043" +
    "\uffd5\051\uffd5\052\uffd5\001\002\000\014\025\063\026\071" +
    "\043\070\051\064\052\066\001\002\000\014\025\uffd4\026" +
    "\uffd4\043\uffd4\051\uffd4\052\uffd4\001\002\000\014\025\uffd3" +
    "\026\uffd3\043\uffd3\051\uffd3\052\uffd3\001\002\000\014\025" +
    "\uffd6\026\uffd6\043\uffd6\051\uffd6\052\uffd6\001\002\000\014" +
    "\025\uffd2\026\uffd2\043\uffd2\051\uffd2\052\uffd2\001\002\000" +
    "\012\021\uffd9\022\uffd9\040\uffd9\044\uffd9\001\002\000\014" +
    "\025\uffd1\026\uffd1\043\uffd1\051\uffd1\052\uffd1\001\002\000" +
    "\026\021\uffd8\022\uffd8\024\102\032\075\033\101\034\077" +
    "\035\100\036\104\040\uffd8\044\uffd8\001\002\000\012\021" +
    "\uffd7\022\uffd7\040\uffd7\044\uffd7\001\002\000\026\021\uffd0" +
    "\022\uffd0\024\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\044\uffd0\001\002\000\014\025\063\026\071" +
    "\043\070\051\064\052\066\001\002\000\032\021\uffcf\022" +
    "\uffcf\024\uffcf\025\063\026\071\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\044\uffcf\001\002\000\026\021" +
    "\uffce\022\uffce\024\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\040\uffce\044\uffce\001\002\000\014\025\uffc9\026" +
    "\uffc9\043\uffc9\051\uffc9\052\uffc9\001\002\000\014\025\063" +
    "\026\071\043\070\051\064\052\066\001\002\000\014\025" +
    "\uffca\026\uffca\043\uffca\051\uffca\052\uffca\001\002\000\032" +
    "\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\044\uffcd\001\002" +
    "\000\036\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\115\030\113\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\040\uffcc\044\uffcc\001\002\000\032\021\uffcb\022\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\040\uffcb\044\uffcb\001\002\000\036\021\uffc7\022" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\044\uffc7\001" +
    "\002\000\020\020\040\025\uffdd\026\uffdd\043\uffdd\051\uffdd" +
    "\052\uffdd\066\uffdd\001\002\000\004\040\124\001\002\000" +
    "\022\006\uffe5\011\uffe5\013\uffe5\014\uffe5\023\uffe5\045\uffe5" +
    "\046\uffe5\051\uffe5\001\002\000\004\012\126\001\002\000" +
    "\004\043\127\001\002\000\020\020\040\025\uffdd\026\uffdd" +
    "\043\uffdd\051\uffdd\052\uffdd\066\uffdd\001\002\000\004\044" +
    "\131\001\002\000\004\040\132\001\002\000\022\006\uffe9" +
    "\011\uffe9\013\uffe9\014\uffe9\023\uffe9\045\uffe9\046\uffe9\051" +
    "\uffe9\001\002\000\004\040\134\001\002\000\022\006\uffe8" +
    "\011\uffe8\013\uffe8\014\uffe8\023\uffe8\045\uffe8\046\uffe8\051" +
    "\uffe8\001\002\000\004\046\136\001\002\000\030\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\023" +
    "\uffe6\045\uffe6\046\uffe6\051\uffe6\001\002\000\020\020\040" +
    "\025\uffdd\026\uffdd\043\uffdd\051\uffdd\052\uffdd\066\uffdd\001" +
    "\002\000\004\044\141\001\002\000\004\050\142\001\002" +
    "\000\004\045\022\001\002\000\006\007\144\010\uffec\001" +
    "\002\000\004\045\022\001\002\000\004\010\146\001\002" +
    "\000\022\006\uffed\011\uffed\013\uffed\014\uffed\023\uffed\045" +
    "\uffed\046\uffed\051\uffed\001\002\000\004\010\uffeb\001\002" +
    "\000\020\020\040\025\uffdd\026\uffdd\043\uffdd\051\uffdd\052" +
    "\uffdd\066\uffdd\001\002\000\004\044\152\001\002\000\004" +
    "\045\022\001\002\000\022\006\uffea\011\uffea\013\uffea\014" +
    "\uffea\023\uffea\045\uffea\046\uffea\051\uffea\001\002\000\004" +
    "\046\ufff6\001\002\000\004\040\163\001\002\000\006\040" +
    "\ufff8\042\160\001\002\000\004\040\ufff9\001\002\000\004" +
    "\051\161\001\002\000\006\040\ufff8\042\160\001\002\000" +
    "\004\040\ufff7\001\002\000\030\006\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\023\ufffd\045\ufffd\046" +
    "\ufffd\051\ufffd\001\002\000\022\006\uffff\011\uffff\013\uffff" +
    "\014\uffff\023\uffff\045\uffff\046\uffff\051\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\007\015\012" +
    "\017\011\001\001\000\010\004\007\015\163\017\011\001" +
    "\001\000\002\001\001\000\004\020\154\001\001\000\024" +
    "\016\033\021\015\022\025\023\034\024\026\025\022\026" +
    "\020\027\032\030\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\153\021\015\022\025\023\034\024" +
    "\026\025\022\026\020\027\032\030\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\134\021\015\022\025\023\034\024\026\025\022\026\020" +
    "\027\032\030\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\031\040\032\042\033" +
    "\041\053\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\034\056\035\071\037\066\040\064\041\055\042\061" +
    "\044\060\001\001\000\004\053\054\001\001\000\002\001" +
    "\001\000\004\046\047\001\001\000\004\045\043\001\001" +
    "\000\002\001\001\000\010\032\045\033\041\053\036\001" +
    "\001\000\004\045\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\051\053\036\001\001\000\004\046" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\113\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\107\050\106\001\001\000\002\001\001\000\006\036\075" +
    "\054\102\001\001\000\012\031\072\032\042\033\041\053" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\037" +
    "\104\040\064\041\055\042\061\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\075" +
    "\054\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\040\110\041\055\042\061\044\060\001\001\000\006" +
    "\041\107\050\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\055\042\116\044\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\113\047\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\122" +
    "\032\042\033\041\053\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\127\032\042\033\041\053\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\137\032\042\033\041\053\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\142\001\001\000" +
    "\004\051\144\001\001\000\004\027\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\150\032\042\033\041\053\036\001\001\000\002\001\001" +
    "\000\004\027\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo padre; //Guardar nodos
    public int cont = 0;      //Contar nodos

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPR ::= MULT_OP EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPR ::= SUMA_OP EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPR ::= Par_abre EXPR Par_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPR ::= Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPR ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= EXPR Or EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= EXPR And EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COND ::= Not COND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COND ::= EXPR MULT_OP EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COND ::= EXPR SUMA_OP EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COND ::= EXPR RELOP EXPR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COND ::= Par_abre COND Par_cierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COND ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COND",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTOR ::= Identificador 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(ident.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR ::= Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(n.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR ::= Par_abre B_EXPRESION Par_cierre 
            {
              Object RESULT =null;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo("Factor");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)bexp);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SUMA_OP ::= Resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(r.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUMA_OP",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SUMA_OP ::= Suma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(s.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUMA_OP",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIGNOFACTOR ::= SUMA_OP FACTOR 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Termino2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)so);
        nd.addHijos((Nodo)f);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIGNOFACTOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIGNOFACTOR ::= FACTOR 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Signo_factor");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)f);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIGNOFACTOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MULT_OP ::= Division 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(d.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULT_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MULT_OP ::= Multiplicacion 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(m.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MULT_OP",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TERMINO2 ::= MULT_OP SIGNOFACTOR TERMINO2 
            {
              Object RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int moright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object mo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Termino2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)mo);
        nd.addHijos((Nodo)sf);
        nd.addHijos((Nodo)t2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TERMINO2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO2",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TERMINO ::= SIGNOFACTOR TERMINO2 
            {
              Object RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Termino");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)sf);
        nd.addHijos((Nodo)t2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION2 ::= SUMA_OP TERMINO EXPRESION2 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Expresion2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)so);
        nd.addHijos((Nodo)t);
        nd.addHijos((Nodo)e2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION2",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION2",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= TERMINO EXPRESION2 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Expresion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)t);
        nd.addHijos((Nodo)e2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RELOP ::= Diferente 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(d.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RELOP ::= Asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(a.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RELOP ::= Mayor_igual 
            {
              Object RESULT =null;
		int maileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object mai = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(mai.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RELOP ::= Mayor 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(ma.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RELOP ::= Menor 
            {
              Object RESULT =null;
		int menleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int menright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object men = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(men.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RELOP ::= Menor_igual 
            {
              Object RESULT =null;
		int menileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int meniright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object meni = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(meni.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELOP",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RELACION2 ::= RELOP EXPRESION RELACION2 
            {
              Object RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int roright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object ro = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Relacion2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)ro);
        nd.addHijos((Nodo)e);
        nd.addHijos((Nodo)r2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACION2",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RELACION2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACION2",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RELACION ::= EXPRESION RELACION2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Relacion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)e);
        nd.addHijos((Nodo)r2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RELACION",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // B_FACTOR ::= RELACION 
            {
              Object RESULT =null;
		int relleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int relright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object rel = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd2 = new Nodo("B_factor");
        nd2.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd2;
        nd2.addHijos((Nodo)rel);
        System.out.println("OK");
        RESULT = nd2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_FACTOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // B_FACTOR ::= Op_booleano 
            {
              Object RESULT =null;
		int obleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int obright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ob = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(ob.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_FACTOR",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NOT_LIST ::= Not NOT_LIST 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo(n.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;

        Nodo nd2 = new Nodo("Not_list");
        nd2.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd2;
        nd2.addHijos((Nodo)nl);
        System.out.println("OK");
        RESULT = nd2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_LIST",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NOT_LIST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_LIST",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NOT_FACTOR ::= NOT_LIST B_FACTOR 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Not_factor");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)nl);
        nd.addHijos((Nodo)bf);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NOT_FACTOR",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // B_TERM2 ::= And NOT_FACTOR B_TERM2 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bt2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bt2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bt2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("B_term2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)nf);
        nd.addHijos((Nodo)bt2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_TERM2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // B_TERM2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_TERM2",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // B_TERM ::= NOT_FACTOR B_TERM2 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bt2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bt2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bt2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("B_term");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)nf);
        nd.addHijos((Nodo)bt2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_TERM",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // B_EXPRESION2 ::= Or B_TERM B_EXPRESION2 
            {
              Object RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("B_expresion2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)bt);
        nd.addHijos((Nodo)be);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_EXPRESION2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // B_EXPRESION2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_EXPRESION2",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // B_EXPRESION ::= B_TERM B_EXPRESION2 
            {
              Object RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int btright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int be2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int be2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object be2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("B_expresion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)bt);
        nd.addHijos((Nodo)be2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("B_EXPRESION",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION_NT ::= Identificador Igual B_EXPRESION Punto_coma 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo(ident.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;

        Nodo nd1 = new Nodo(igual.toString());
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        RESULT = nd1;

        Nodo nd2 = new Nodo("Asignacion_nt");
        nd2.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd2;
        nd2.addHijos((Nodo)bexp);
        System.out.println("OK");
        RESULT = nd2;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION_NT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOQUE ::= Llave_abre LISTA_SENTENCIAS Llave_cierre 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo("Bloque");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)ls);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT_WRITE ::= Write B_EXPRESION Punto_coma 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo(w.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;

        Nodo nd1 = new Nodo("Sent_write");
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        nd1.addHijos((Nodo)bexp);
        System.out.println("OK");
        RESULT = nd1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_WRITE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT_READ ::= Read Identificador Punto_coma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo(r.toString());
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        RESULT = nd;

        Nodo nd1 = new Nodo(ident.toString());
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        RESULT = nd1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT_READ",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REPETICION ::= Do BLOQUE Until Par_abre B_EXPRESION Par_cierre Punto_coma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Nodo nd = new Nodo("Repeticion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)b);
        nd.addHijos((Nodo)bexp);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ITERACION ::= While Par_abre B_EXPRESION Par_cierre BLOQUE 
            {
              Object RESULT =null;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Iteracion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)bexp);
        nd.addHijos((Nodo)b);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ITERACION",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE_ELSE ::= Else BLOQUE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Else");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(e.toString());
        System.out.println("OK");

        Nodo nd1 = new Nodo("Bloque_else");
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        nd1.addHijos((Nodo)b);
        System.out.println("OK");
        RESULT = nd1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_ELSE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BLOQUE_ELSE",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SELECCION ::= If Par_abre B_EXPRESION Par_cierre Then BLOQUE BLOQUE_ELSE Fi 
            {
              Object RESULT =null;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int beleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo("Seleccion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)bexp);
        nd.addHijos((Nodo)b);
        nd.addHijos((Nodo)be);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SELECCION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= ASIGNACION_NT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)a);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= BLOQUE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)b);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENT_WRITE 
            {
              Object RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sw = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)sw);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENT_READ 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)sr);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= REPETICION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)r);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= ITERACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)i);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SELECCION 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)s);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_SENTENCIAS ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA_SENTENCIAS ::= SENTENCIAS LISTA_SENTENCIAS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Lista_sentencias");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)s);
        nd.addHijos((Nodo)ls);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_SENTENCIAS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA_ID2 ::= Coma Identificador LISTA_ID2 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int li2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Id2");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(ident.toString());
        System.out.println("OK");

        Nodo nd1 = new Nodo("Lista_id2");
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        nd1.addHijos((Nodo)li2);
        System.out.println("OK");
        RESULT = nd1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID2",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_ID2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID2",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_ID ::= Identificador LISTA_ID2 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int li2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int li2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object li2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Id");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(ident.toString());
        System.out.println("OK");

        Nodo nd1 = new Nodo("Lista_id");
        nd1.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd1;
        nd1.addHijos((Nodo)li2);
        System.out.println("OK");
        RESULT = nd1;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_ID",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= Bool 
            {
              Object RESULT =null;
		int _boolleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _boolright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _bool = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("TipoBool");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(_bool.toString());
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= Float 
            {
              Object RESULT =null;
		int _floatleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _floatright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _float = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("TipoFloat");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(_float.toString());
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= Int 
            {
              Object RESULT =null;
		int _intleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int _intright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object _int = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("TipoInt");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.setValor(_int.toString());
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= TIPO LISTA_ID Punto_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo("Declaracion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)t);
        nd.addHijos((Nodo)li);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_DECLARACION ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_DECLARACION ::= DECLARACION LISTA_DECLARACION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Nodo nd = new Nodo("Lista_declaracion");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)d);
        nd.addHijos((Nodo)ld);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Llave_abre LISTA_DECLARACION LISTA_SENTENCIAS Llave_cierre 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Nodo nd = new Nodo("Program");
        nd.setIdNod(parser.cont++);
        parser.padre = (Nodo) nd;
        nd.addHijos((Nodo)n1);
        nd.addHijos((Nodo)n2);
        System.out.println("OK");
        RESULT = nd;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

